package main

import (
	"fmt"
	"sync"
)

/*
race condition

это когда один или несколько процессов работают с некоторыми данными одновременно
в практических моментах это плохо, потому что если два разработчика допустим зальют код, которые будут конфликтовать друг с другом,
это будет очень плохо

*/

var (
	counter = 0
	wg      sync.WaitGroup
	//mu      sync.Mutex
)

func increment() {
	defer wg.Done()
	for i := 0; i < 100000; i++ {
		//mu.Lock()
		counter++
		//mu.Unlock()
	}
}

func main() {
	wg.Add(2)
	go increment()
	go increment()
	wg.Wait()
	fmt.Println("Counter:", counter)
}

/*
в этом коде, горутины инкрементирует каунтер 100000 раз
и когда происходит race condition, результат будет хаотичным, потому что не все инкременты записываются, один записывается первее другого
чтобы от этого избавиться, мы можем использовать мютексы, которые обеспечивают синхронизируют две горутины
*/
